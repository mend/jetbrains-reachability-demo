package io.mend.reachability.demo.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.apache.commons.lang3.StringUtils;

import java.nio.file.Path;

@Data
@NoArgsConstructor
@ToString
@EqualsAndHashCode
@JsonIgnoreProperties(ignoreUnknown = true)
public class ResourceVulnerabilityDto {

    @JsonIgnore private static final String DELIMITER = "##";
    @JsonIgnore private static final String EMPTY = "empty";

    private String sha1;
    private String md5;
    private String groupId;
    private String artifactId;
    private String versionId;
    @EqualsAndHashCode.Exclude private String componentType;
    @EqualsAndHashCode.Exclude private String filename;
    @EqualsAndHashCode.Exclude private String filePath;

    @JsonIgnore
    public boolean isEmpty(){
        return StringUtils.isEmpty(groupId) && StringUtils.isEmpty(artifactId) && StringUtils.isEmpty(versionId) && StringUtils.isEmpty(componentType);
    }

    public Path calcRelativePath(String language){

        String groupIdFolder = StringUtils.isEmpty(groupId) ? EMPTY : groupId.replaceAll("/", "_");
        String artifactIdFolder = StringUtils.isEmpty(artifactId) ? EMPTY : artifactId.replaceAll("/", "_");
        String versionIdFolder = StringUtils.isEmpty(versionId) ? EMPTY : versionId.replaceAll("/", "_");
        return Path.of( language, groupIdFolder, artifactIdFolder, versionIdFolder );

    }



}
